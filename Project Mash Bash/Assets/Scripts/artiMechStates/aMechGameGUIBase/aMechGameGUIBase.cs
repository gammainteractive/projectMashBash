/// Artimech
/// 
/// Copyright Â© <2017> <George A Lancaster>
/// Permission is hereby granted, free of charge, to any person obtaining a copy of this software 
/// and associated documentation files (the "Software"), to deal in the Software without restriction, 
/// including without limitation the rights to use, copy, modify, merge, publish, distribute, 
/// sublicense, and/or sell copies of the Software, and to permit persons to whom the Software 
/// is furnished to do so, subject to the following conditions:
/// The above copyright notice and this permission notice shall be included in all copies 
/// or substantial portions of the Software.
/// 
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
/// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS 
/// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
/// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
/// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
/// OTHER DEALINGS IN THE SOFTWARE.

using UnityEngine;
using System.Collections;

namespace Artimech
{
    public class aMechGameGUIBase : stateMachineGame
    {
        public enum eActionType { kNada, kFadeIn, kFadeOut };
        eActionType m_Action = eActionType.kNada;
        eActionType m_WasAction = eActionType.kNada;


        [Header("aMechGameGUIBase:")]
        [SerializeField]
        [Tooltip("Link to the active game object")]
        GameObject[] m_LinkedGameObjects;
        [SerializeField]
        [Tooltip("Fade in curve in seconds.")]
        AnimationCurve m_FadeInCurve;
        [SerializeField]
        [Tooltip("Fade out curve in seconds.")]
        AnimationCurve m_FadeOutCurve;
        [SerializeField]
        [Tooltip("Deactivate On Fade Out")]
        private bool m_DeActivateOnFadeOut = true;
        [SerializeField]
        [Tooltip("Sets the alpha of a give target when starting.")]
        bool m_AlphaStartBool = true;
        [SerializeField]
        [Tooltip("How the graphics starts out in the alpha setting.")]
        float m_AlphaStart = 0.0f;

        public eActionType Action { get => m_Action; set => m_Action = value; }
        public AnimationCurve FadeOutCurve { get => m_FadeOutCurve; }
        public AnimationCurve FadeInCurve { get => m_FadeInCurve; }
        public bool DeActivateOnFadeOut { get => m_DeActivateOnFadeOut; }
        public float AlphaStart { get => m_AlphaStart; }
        public bool AlphaStartBool { get => m_AlphaStartBool; }
        public eActionType WasAction { get => m_WasAction; set => m_WasAction = value; }
        public GameObject[] LinkedGameObjects { get => m_LinkedGameObjects; set => m_LinkedGameObjects = value; }

        new void Awake()
        {
            base.Awake();
            CreateStates();
        }

        // Use this for initialization
        new void Start()
        {
            base.Start();
        }

        // Update is called once per frame
        new void Update()
        {
            base.Update();
            //WasAction = Action;
        }

        new void FixedUpdate()
        {
            base.FixedUpdate();
        }

        /// <summary>
        /// Autogenerated state are created here inside this function.
        /// </summary>
        void CreateStates()
        {

            m_CurrentState = AddState(new gameGUIBaseStart(this.gameObject), "gameGUIBaseStart");

            //<ArtiMechStates>
            AddState(new gameGUIGfxSetActive(this.gameObject), "gameGUIGfxSetActive");
            AddState(new gameGUIFadeIn(this.gameObject), "gameGUIFadeIn");
            AddState(new gameGUIFadeOut(this.gameObject), "gameGUIFadeOut");
            AddState(new gameGUIUpdate(this.gameObject), "gameGUIUpdate");

        }
    }
}